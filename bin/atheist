#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path '../../lib', __FILE__
require 'she_told_me_she_had_a_god_complex_i_told_her_i_was_an_atheist'
require 'she_told_me_she_had_a_god_complex_i_told_her_i_was_an_atheist/cli'
require 'she_told_me_she_had_a_god_complex_i_told_her_i_was_an_atheist/highline_io'

require 'encryptor'
require 'json'



io                = SheToldMeSheHadAGodComplexIToldHerIWasAnAtheist::HighlineIO.new
password_filename = ENV.fetch "she_told_me_she_had_a_god_complex_i_told_her_i_was_an_atheist",
                              "#{ENV['HOME']}/.she_told_me_she_had_a_god_complex_i_told_her_i_was_an_atheist"
# password_filename = './password_file'

if File.exist? password_filename
  old_password   = io.password 'enter your old passord: '
  secret_key     = Digest::SHA256.hexdigest old_password
  encrypted_file = File.read password_filename
  begin
    decrypted_file = Encryptor.decrypt encrypted_file, key: secret_key
    new_password   = io.password 'enter your new passord: '
    secret_key     = Digest::SHA256.hexdigest new_password
    encrypted_file = Encryptor.encrypt decrypted_file, key: secret_key
    File.open(password_filename, 'w') { |f| f.write encrypted_file }
    io.success "your master password has been set"
  rescue OpenSSL::OpenSSLError
    $stderr.puts "Incorrect master password" # should delegate to io.failure
    exit 1
  end
else
  password       = io.password 'enter your master password: '
  password_data  = { passwords: {} }
  secret_key     = Digest::SHA256.hexdigest password
  encrypted_file = Encryptor.encrypt password_data.to_json, key: secret_key
  File.open(password_filename, 'w') { |f| f.write encrypted_file }
  io.success "your master password has been set"
end
